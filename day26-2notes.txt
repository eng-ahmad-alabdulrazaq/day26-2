//\\ ÿ®ÿ≥ŸÖ ÿßŸÑŸÑŸá ÿßŸÑÿ±ÿ≠ŸÖŸÜ ÿßŸÑÿ±ÿ≠ŸäŸÖ //\\

part1

In this task you will setup your first Express app and create one endpoint that returns a list of all products.

1. Setup
Install nodemon globally:

$ npm install -g nodemon
Create a new repository, don't forget to add a .gitignore file of type Node. Then clone it.

2. Setup Your Express App
In your cloned repo, create a package.json file using npm init -y.
Create an app.js file in your project folder. Don't forget to change the main file in package.json from index.js to app.js.
Install express and create an express application instance.
Bind your application to port 8000 using the listen() method.
Create a script in package.json that executes nodemon app.js when you run npm start.
3. Data Setup
Create a new file called data.js. Copy the following data in this file. Don't forget to export it.
Require it in app.js.
4. Product List Route
Create a route that sends the list of your products:

The route's method should be get.
The URL for this route should have the following syntax: /api/products.
The response must be the list of all products.
Testing
Test your endpoint using the browser. It should display your array of products.

part 2
Banking API üè¶
In this task, you will create a banking API with the basic CRUD operations.

Instructions
Fork and clone this repository to your Development folder.
You have a data file called accounts.js, it's an array of bank accounts with the owner's username and the funds that he got in KWD.
Fetch Accounts
The method you will use is get, create a route to /accounts.
In the response, send the accounts data, using the json method because we need to convert it to json.
We need to also send a status code using .status method, which code represents a successful response?
Create Account
The method you will use is post, create a route to /accounts.
Generate an id for our new account.
Create a variable newAccount to store our new account, pass it the data coming from req.body, the id we just created and a funds of 0 since it's the default
Push your newAccount into the accounts array.
Return the newAccount in the response with the correct status code.
Delete Account
The method you will use is delete, create a route to /accounts that accepts a param accountId.
Extract this param using req.params.
Find the account with the same id, if it doesn't exist, return a response with 404 status code and not found message.
If it does exist, filter your accounts array to not incldue this deleted account.
Send a response with the correct status code.
Update Account
The method you will use is put, create a route to /accounts that accepts a param accountId.
Extract this param using req.params.
Find the account with the same id, if it doesn't exist, return a response with 404 status code and not found message.
If it does exist, replace the values of the account with the new values coming from the req.
Send a response with the correct status code.
Refactor your code.
create a folder named api, inside it create a folder named accounts and inside it create 2 files: accounts.routes.js and accounts.controllers.js.
Initialize your mini express app in accounts.routes.js.
Export your router.
Move all your routes from app.js to accounts.routes.js and replace all app to router.
In your app.js import your new routes file.
Use your new routes with app.use.
Add /accounts as a first argument for app.use and remove /accounts from accounts.routes.js.
Moving to the controllers file, create a function called accountsGet that takes req and res and sends the accounts as a resposne and export it.
Import the accounts.js data file in your controllers file
In your router file import the new function we just created.
Replace the callback function with the function we just imported.
Do the same for the other routes.
Bonus
üçã Retrieve a single account
Create a route that retrieve a single account by the username of the owner not by it's ID.
üå∂ Query Parameters
You have learned about route params, but there's also something called query params.

On the route you created in the previous challenge, add a query param that retrieves the account info and funds in USD.
Your URL should look like: localhost:8000/accounts/Omar?currency=usd